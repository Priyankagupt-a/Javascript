3.   What is React.Query?   How to manage the state using React.Query?  Try to prepare a basic example to demonstrate usage of React.Query?
What is React Query?

React Query is a powerful library for managing data fetching, caching, synchronization, and state management in React applications. It helps simplify handling server-side data, making it easier to fetch, cache, and sync data with the server, all while handling complex states like loading, error handling, and re-fetching.

In layman’s terms, React Query helps you efficiently manage and display data in your React application that comes from an external server or API. It makes the process of requesting, storing, and updating data much easier compared to manually managing it in a React component’s state.

Key Features of React Query:

	•	Fetching Data: It provides simple functions to fetch data from an API.
	•	Caching: It caches the data to avoid unnecessary API calls, improving performance.
	•	Synchronization: React Query ensures your app stays up-to-date with the latest data by re-fetching data when necessary.
	•	State Management: It simplifies managing loading, success, and error states for API requests.
	•	Automatic Refetching: It automatically refetches data when needed, such as when the component mounts or the network status changes.

How to manage state using React Query?

React Query helps manage remote data (such as data fetched from APIs) by handling all the logic for fetching, caching, and updating data. It uses hooks like useQuery for reading data and useMutation for updating data. React Query takes care of the complex state management for you.

Here’s how it works in simple steps:
	1.	Fetching data: Use the useQuery hook to fetch data.
	2.	Managing loading and error states: React Query automatically handles loading and error states for you.
	3.	Caching data: It stores data so you don’t have to re-fetch it unless necessary.
	4.	Updating data: Use the useMutation hook to send data to the server (e.g., creating or updating records).

Basic Example of React Query Usage:

In this example, we’ll build a simple React app that fetches a list of users from an API and displays them.
	1.	Install React Query:
To use React Query in your project, first, you need to install it:

npm install @tanstack/react-query


	2.	Set up a basic React Query configuration:
You need to wrap your app with QueryClientProvider to provide the configuration for React Query.
	3.	Create a Component that fetches and displays data:
We’ll use useQuery to fetch data from a public API (like a list of users).

Here’s the complete code:

import React from 'react';
import { QueryClient, QueryClientProvider, useQuery } from '@tanstack/react-query';

// Set up a QueryClient for React Query
const queryClient = new QueryClient();

// Fetch function to get user data from an API
const fetchUsers = async () => {
  const response = await fetch('https://jsonplaceholder.typicode.com/users');
  if (!response.ok) {
    throw new Error('Network response was not ok');
  }
  return response.json();
};

// Component to display the list of users
const UsersList: React.FC = () => {
  // Using useQuery hook to fetch users data
  const { data, isLoading, isError, error } = useQuery(['users'], fetchUsers);

  if (isLoading) return <p>Loading...</p>;
  if (isError) return <p>Error: {error instanceof Error ? error.message : 'Unknown error'}</p>;

  return (
    <div>
      <h1>Users List</h1>
      <ul>
        {data?.map((user: { id: number, name: string }) => (
          <li key={user.id}>{user.name}</li>
        ))}
      </ul>
    </div>
  );
};

// Main App component where React Query is set up
const App: React.FC = () => {
  return (
    <QueryClientProvider client={queryClient}>
      <UsersList />
    </QueryClientProvider>
  );
};

export default App;

How this works:

	1.	Setting up QueryClient:
	•	The QueryClient is set up using new QueryClient() and provided to the entire app via QueryClientProvider. This acts as the configuration for React Query.
	2.	Fetching Data with useQuery:
	•	The useQuery hook is used to fetch data. It takes two arguments:
	1.	A query key (['users']) to uniquely identify the query.
	2.	A function (fetchUsers) that fetches the data from the API.
	•	The useQuery hook provides useful state like isLoading (true while data is being fetched), isError (true if there is an error), and data (the fetched data).
	3.	Error and Loading States:
	•	While the data is loading, we display a “Loading…” message.
	•	If there’s an error (e.g., network failure), an error message is displayed.
	4.	Rendering the Data:
	•	Once the data is successfully fetched, we map over the data (which contains the list of users) and display each user’s name in a list.

Why React Query is Useful Here:

	•	Automatic Handling of Loading and Error States: React Query automatically provides isLoading, isError, and error states without having to manually track them in the component state.
	•	Caching: The list of users is cached, meaning React Query won’t refetch the data unless necessary (e.g., when the user refreshes the page).
	•	Synchronization: React Query keeps your data in sync with the server by re-fetching when necessary (e.g., when the component remounts or the network status changes).

Conclusion:

React Query is a great tool to simplify managing remote data (data fetched from APIs) in React apps. It handles the complexities of data fetching, caching, and synchronization while providing easy-to-use hooks to fetch and manipulate data.

